import os
import datetime
import discord
from discord.ext import commands
from discord.ui import View, Button, Modal, TextInput, Select
import re
import json
import asyncio

from server import server_on

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏ó
gamepass_rate = 6
group_rate_low = 4
group_rate_high = 4.5

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
shop_open = True
group_ticket_enabled = True

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞ stock
MAIN_CHANNEL_ID = 1361044752975532152
SALES_LOG_CHANNEL_ID = 1402993077643120720
stock_amount = 100

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
user_forms = {}
user_notes = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

bot = commands.Bot(command_prefix="!", intents=intents)

# --------------------------------------------------------------------------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
async def send_sale_log(embed_data: discord.Embed, interaction: discord.Interaction = None, ctx: commands.Context = None, delivered_by: discord.Member = None):
    """‡∏™‡πà‡∏á Embed ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
    try:
        channel = bot.get_channel(SALES_LOG_CHANNEL_ID)
        if channel is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
            return

        robux_amount = next((f.value for f in embed_data.fields if f.name == "üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux"), "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
        price = next((f.value for f in embed_data.fields if f.name in ("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏£‡∏ó", "üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤")), "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
        user_name = next((f.value for f in embed_data.fields if f.name == "üòä ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠"), "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")

        sale_type = "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"
        current_channel = interaction.channel if interaction else ctx.channel if ctx else None
        if current_channel:
            category_name = current_channel.category.name if current_channel.category else ""
            if "gamepass" in category_name.lower():
                sale_type = "Robux Gamepass"
            elif "group" in category_name.lower():
                sale_type = "Robux Group"

        ticket_creator = None
        if current_channel and current_channel.name.startswith("ticket-"):
            try:
                user_id = int(current_channel.name.split("-")[-1])
                ticket_creator = await current_channel.guild.fetch_member(user_id)
            except (IndexError, ValueError, discord.NotFound):
                pass

        log_embed = discord.Embed(
            title="üç£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üç£",
            color=0x00FF00,
            timestamp=discord.utils.utcnow()
        )
        log_embed.add_field(name="üì¶ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=sale_type, inline=False)
        log_embed.add_field(name="üòä ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠", value=ticket_creator.mention if ticket_creator else user_name, inline=False)
        log_embed.add_field(name="üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux", value=robux_amount, inline=True)
        log_embed.add_field(name="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤", value=price, inline=True)
        log_embed.add_field(name="üöö ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=delivered_by.mention if delivered_by else "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö", inline=False)
        log_embed.set_footer(text="‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        await channel.send(embed=log_embed)

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢: {e}")

# --------------------------------------------------------------------------------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Stock
@bot.command()
@commands.has_permissions(administrator=True)
async def stock(ctx, amount: int = None):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô stock (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•)"""
    global stock_amount
    
    if amount is None:
        await ctx.send(f"üìä Stock ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **{stock_amount}**", delete_after=10)
    else:
        if amount < 0:
            await ctx.send("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô stock ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0", delete_after=5)
            return
        
        stock_amount = amount
        await ctx.send(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ stock ‡πÄ‡∏õ‡πá‡∏ô **{stock_amount}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", delete_after=5)
    
    await ctx.message.delete()
    await update_main_channel()

# --------------------------------------------------------------------------------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô
@bot.command()
@commands.has_permissions(administrator=True)
async def sushi(ctx):
    """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á Gamepass ‡πÅ‡∏•‡∏∞ Group)"""
    global shop_open
    shop_open = not shop_open

    status = "‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î" if shop_open else "‚ùå ‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î"
    await ctx.send(
        f"üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô: **{status}**",
        delete_after=5
    )
    await ctx.message.delete()

    if ctx.channel.id == MAIN_CHANNEL_ID:
        await update_main_channel()

# --------------------------------------------------------------------------------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏¥‡∏î Group Ticket
@bot.command()
@commands.has_permissions(administrator=True)
async def group(ctx, status: str = None):
    """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Group Ticket"""
    global group_ticket_enabled
    
    if status is None:
        current_status = "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î" if group_ticket_enabled else "‚ùå ‡∏õ‡∏¥‡∏î"
        await ctx.send(f"üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Group Ticket: **{current_status}**", delete_after=5)
    elif status.lower() in ["on", "enable", "‡πÄ‡∏õ‡∏¥‡∏î"]:
        group_ticket_enabled = True
        await ctx.send("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Group Ticket ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", delete_after=5)
    elif status.lower() in ["off", "disable", "‡∏õ‡∏¥‡∏î"]:
        group_ticket_enabled = False
        await ctx.send("‚ùå ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Group Ticket ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", delete_after=5)
    else:
        await ctx.send("‚ùå ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: !group [on/off] ‡∏´‡∏£‡∏∑‡∏≠ !group [enable/disable] ‡∏´‡∏£‡∏∑‡∏≠ !group [‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î]", delete_after=5)
    
    await ctx.message.delete()
    await update_main_channel()

# --------------------------------------------------------------------------------------------------
# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
async def update_main_channel():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å"""
    channel = bot.get_channel(MAIN_CHANNEL_ID)
    if not channel:
        return

    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ
    async for msg in channel.history(limit=20):
        if msg.author == bot.user and len(msg.embeds) > 0:
            try:
                await msg.delete()
            except:
                pass

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    embed = discord.Embed(
        title="üç£ Sushi Shop üç£",
        color=0x2B2D31,
        timestamp=discord.utils.utcnow()
    )
    
    # ‡∏™‡πà‡∏ß‡∏ô Gamepass - ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    embed.add_field(
        name="üéÆ **Gamepass Service**",
        value=(
            "```\n"
            f"‡πÄ‡∏£‡∏ó: {gamepass_rate}\n"
            "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÄ‡∏Å‡∏°‡∏û‡∏≤‡∏™‡∏ó‡∏∏‡∏Å‡πÄ‡∏Å‡∏°\n"
            "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å\n"
            "```\n"
            "**‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠**"
        ),
        inline=False
    )
    
    # ‡∏™‡πà‡∏ß‡∏ô Group - ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    if group_ticket_enabled:
        group_value = (
            "```\n"
            f"‡πÄ‡∏£‡∏ó: {group_rate_low}-{group_rate_high}\n"
            "‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 500 ‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏ó 4.5\n"
            "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å\n"
            "```\n"
            f"üìå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°: [VALKYs](https://www.roblox.com/communities/34713179/VALKYs)\n"
            "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 15 ‡∏ß‡∏±‡∏ô\n"
            "**‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠**"
        )
    else:
        group_value = "```\nüö´ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß\n```"
    
    embed.add_field(
        name="üë• **Robux Group Service**", 
        value=group_value,
        inline=False
    )
    
    # ‡∏™‡πà‡∏ß‡∏ô Stock - ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    stock_status = "üü¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" if stock_amount > 0 else "üî¥ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î"
    embed.add_field(
        name="üìä **Stock Information**",
        value=(
            f"```\n"
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Stock: {stock_amount}\n"
            f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {stock_status}\n"
            "```"
        ),
        inline=False
    )
    
    # Footer ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
    embed.set_footer(
        text="Sushi Shop ‚Ä¢ Professional Robux Service",
        icon_url="https://media.discordapp.net/attachments/717757556889747657/1403684950770847754/noFilter.png"
    )
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ thumbnail
    embed.set_thumbnail(url="https://media.discordapp.net/attachments/717757556889747657/1403684950770847754/noFilter.png")

    # ‡∏™‡πà‡∏á embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°
    try:
        await channel.send(embed=embed, view=MainShopView())
    except Exception as e:
        print(f"Error updating main channel: {e}")

# --------------------------------------------------------------------------------------------------
# Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
class PersonalNoteModal(Modal, title="üìù ‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"):
    note = TextInput(
        label="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°, ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°, ‡∏Ø‡∏•‡∏Ø",
        style=discord.TextStyle.paragraph,
        required=True,
        max_length=1000
    )

    async def on_submit(self, interaction: discord.Interaction):
        user_id = str(interaction.user.id)
        user_notes[user_id] = {
            "note": self.note.value,
            "created_at": datetime.datetime.now().isoformat()
        }
        
        embed = discord.Embed(
            title="‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
            description="‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            color=0x00FF00
        )
        embed.add_field(name="üìù ‡πÇ‡∏ô‡πâ‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", value=self.note.value, inline=False)
        await interaction.response.send_message(embed=embed, ephemeral=True)

# --------------------------------------------------------------------------------------------------
# Views ‡πÅ‡∏•‡∏∞ Modals ‡∏´‡∏•‡∏±‡∏Å
class MainShopView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üéÆ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß Gamepass", style=discord.ButtonStyle.success, custom_id="open_gamepass_ticket", emoji="üéÆ")
    async def gamepass_ticket(self, interaction: discord.Interaction, button: Button):
        if not shop_open or stock_amount <= 0:
            await interaction.response.send_message("‚ùå ‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î", ephemeral=True)
            return
        await handle_open_ticket(interaction, "üç£Sushi Gamepass üç£", GamepassTicketModal)

    @discord.ui.button(label="üë• ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß Group", style=discord.ButtonStyle.success, custom_id="open_group_ticket", emoji="üë•")
    async def group_ticket(self, interaction: discord.Interaction, button: Button):
        if not shop_open or stock_amount <= 0:
            await interaction.response.send_message("‚ùå ‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î", ephemeral=True)
            return
        if not group_ticket_enabled:
            await interaction.response.send_message("‚ùå ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Group ‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", ephemeral=True)
            return
        await handle_open_ticket(interaction, "üí∞Robux Groupüí∞", GroupTicketModal)

    @discord.ui.button(label="üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", style=discord.ButtonStyle.secondary, custom_id="manage_my_form", emoji="üìù")
    async def manage_form(self, interaction: discord.Interaction, button: Button):
        view = FormManagementView(user_id=interaction.user.id)
        embed = discord.Embed(
            title="üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô",
            description="**‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ:**\n\n"
                      "‚Ä¢ üëÄ **‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•** - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ\n"
                      "‚Ä¢ ‚úèÔ∏è **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç** - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°\n"
                      "‚Ä¢ üóëÔ∏è **‡∏•‡∏ö** - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö\n"
                      "‚Ä¢ üìù **‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß** - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n\n"
                      "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
            color=0x5865F2
        )
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

# --------------------------------------------------------------------------------------------------
# Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gamepass
class GamepassTicketModal(Modal, title="üìã ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Gamepass"):
    def __init__(self, user_id=None, existing_data=None):
        super().__init__(timeout=300)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout
        self.user_id = user_id
        
        self.map_name = TextInput(
            label="üó∫ ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Å‡∏î?",
            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏û ‡πÄ‡∏ä‡πà‡∏ô All Star Tower Defense X",
            default=existing_data.get("map_name", "") if existing_data else "",
            required=True,
            max_length=100
        )
        
        self.gamepass_name = TextInput(
            label="üí∏ ‡∏Å‡∏î‡πÄ‡∏Å‡∏°‡∏û‡∏≤‡∏™‡∏≠‡∏∞‡πÑ‡∏£?",
            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏û‡∏≤‡∏™ ‡πÄ‡∏ä‡πà‡∏ô x3 Speed 3 ‡∏ä‡∏¥‡πâ‡∏ô",
            default=existing_data.get("gamepass_name", "") if existing_data else "",
            required=True,
            max_length=100
        )
        
        self.robux_amount = TextInput(
            label="üéü ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏µ‡πà Robux?",
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 995 ‡∏´‡∏£‡∏∑‡∏≠ 100+100+100 ‡∏´‡∏£‡∏∑‡∏≠ 100x3",
            default=existing_data.get("robux_amount", "") if existing_data else "",
            required=True,
            max_length=50
        )
        
        self.add_item(self.map_name)
        self.add_item(self.gamepass_name)
        self.add_item(self.robux_amount)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
            user_id = str(interaction.user.id)
            user_forms[user_id] = {
                "map_name": self.map_name.value,
                "gamepass_name": self.gamepass_name.value,
                "robux_amount": self.robux_amount.value,
                "type": "gamepass",
                "last_updated": datetime.datetime.now().isoformat()
            }
            
            # ‡πÅ‡∏õ‡∏•‡∏á input ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö x ‡πÅ‡∏•‡∏∞ √∑
            expr = self.robux_amount.value.lower().replace("x", "*").replace("√∑", "/")

            if not re.match(r"^[\d\s\+\-\*\/\(\)]+$", expr):
                await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ + - * / x √∑ ()", ephemeral=True)
                return

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì robux
            robux = int(eval(expr))
            price = robux / gamepass_rate
            price_str = f"{price:,.0f} ‡∏ö‡∏≤‡∏ó"

            # Embed ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            customer_embed = discord.Embed(
                title="üì® ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Gamepass", 
                color=0x00FF99,
                timestamp=discord.utils.utcnow()
            )
            customer_embed.add_field(name="üó∫Ô∏è ‡πÅ‡∏°‡∏û", value=self.map_name.value, inline=False)
            customer_embed.add_field(name="üéü ‡πÄ‡∏Å‡∏°‡∏û‡∏≤‡∏™", value=self.gamepass_name.value, inline=False)
            customer_embed.add_field(name="üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux", value=f"{robux:,}", inline=True)
            customer_embed.add_field(name="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤", value=price_str, inline=True)
            customer_embed.add_field(name="üìù ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°", value="‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", inline=False)
            customer_embed.set_footer(text="‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏±‡∏ö")

            view = ConfirmTicketView(embed_data=customer_embed)
            await interaction.response.send_message(
                content="‚úÖ **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!**\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô'",
                embed=customer_embed, 
                view=view, 
                ephemeral=False
            )

        except Exception as e:
            await interaction.response.send_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)

# --------------------------------------------------------------------------------------------------
# Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Group
class GroupTicketModal(Modal, title="üìã ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Robux Group"):
    def __init__(self, user_id=None, existing_data=None):
        super().__init__(timeout=300)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout
        self.user_id = user_id
        
        self.user_name = TextInput(
            label="ü™™ ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°", 
            placeholder="Username",
            default=existing_data.get("user_name", "") if existing_data else "",
            required=True,
            max_length=50
        )
        
        self.robux_amount = TextInput(
            label="üí∏ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏µ‡πà Robux?", 
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
            default=existing_data.get("robux_amount", "") if existing_data else "",
            required=True,
            max_length=50
        )
        
        self.add_item(self.user_name)
        self.add_item(self.robux_amount)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
            user_id = str(interaction.user.id)
            user_forms[user_id] = {
                "user_name": self.user_name.value,
                "robux_amount": self.robux_amount.value,
                "type": "group",
                "last_updated": datetime.datetime.now().isoformat()
            }
            
            robux = int(self.robux_amount.value)
            rate = group_rate_low if robux < 1500 else group_rate_high
            price = robux / rate
            price_str = f"{price:,.0f} ‡∏ö‡∏≤‡∏ó"

            customer_embed = discord.Embed(
                title="üì® ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Robux Group", 
                color=0x00FF99,
                timestamp=discord.utils.utcnow()
            )
            customer_embed.add_field(name="ü™™ ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°", value=self.user_name.value, inline=False)
            customer_embed.add_field(name="üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux", value=f"{robux:,}", inline=True)
            customer_embed.add_field(name="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤", value=price_str, inline=True)
            customer_embed.add_field(name="üìù ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°", value="‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", inline=False)
            customer_embed.set_footer(text="‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏±‡∏ö")

            view = ConfirmTicketView(embed_data=customer_embed)
            await interaction.response.send_message(
                content="‚úÖ **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!**\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô'",
                embed=customer_embed, 
                view=view, 
                ephemeral=False
            )

        except ValueError:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", ephemeral=True)

# --------------------------------------------------------------------------------------------------
# View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
class FormManagementView(View):
    def __init__(self, user_id):
        super().__init__(timeout=60)
        self.user_id = user_id

    @discord.ui.button(label="üëÄ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°", style=discord.ButtonStyle.primary, emoji="üëÄ")
    async def view_form(self, interaction: discord.Interaction, button: Button):
        user_data = user_forms.get(str(interaction.user.id))
        user_note = user_notes.get(str(interaction.user.id))
        
        if not user_data and not user_note:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏ô‡πâ‡∏ï ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡πÇ‡∏ô‡πâ‡∏ï
            modal = PersonalNoteModal()
            await interaction.response.send_modal(modal)
            return
        
        embed = discord.Embed(
            title="üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô",
            description="**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ:**",
            color=0x00FF99
        )
        
        if user_data:
            embed.timestamp = datetime.datetime.fromisoformat(user_data["last_updated"])
            if user_data["type"] == "gamepass":
                embed.add_field(name="üó∫Ô∏è ‡πÅ‡∏°‡∏û", value=user_data["map_name"], inline=False)
                embed.add_field(name="üéü ‡πÄ‡∏Å‡∏°‡∏û‡∏≤‡∏™", value=user_data["gamepass_name"], inline=False)
                embed.add_field(name="üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux", value=user_data["robux_amount"], inline=True)
            else:
                embed.add_field(name="ü™™ ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°", value=user_data["user_name"], inline=False)
                embed.add_field(name="üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux", value=user_data["robux_amount"], inline=True)
                
            embed.add_field(name="üì¶ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", value="Gamepass" if user_data["type"] == "gamepass" else "Group", inline=True)
        
        if user_note:
            embed.add_field(name="üìù ‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", value=user_note["note"], inline=False)
            embed.timestamp = datetime.datetime.fromisoformat(user_note["created_at"])
        
        embed.set_footer(text="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @discord.ui.button(label="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏≠‡∏£‡πå‡∏°", style=discord.ButtonStyle.secondary, emoji="‚úèÔ∏è")
    async def edit_form(self, interaction: discord.Interaction, button: Button):
        user_data = user_forms.get(str(interaction.user.id))
        
        if not user_data:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ", ephemeral=True)
            return
        
        if user_data["type"] == "gamepass":
            modal = GamepassTicketModal(user_id=interaction.user.id, existing_data=user_data)
        else:
            modal = GroupTicketModal(user_id=interaction.user.id, existing_data=user_data)
            
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="üóëÔ∏è ‡∏•‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°", style=discord.ButtonStyle.danger, emoji="üóëÔ∏è")
    async def delete_form(self, interaction: discord.Interaction, button: Button):
        user_id = str(interaction.user.id)
        if user_id in user_forms:
            del user_forms[user_id]
            embed = discord.Embed(
                title="üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°",
                description="‚úÖ **‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß**\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                color=0x00FF00
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ", ephemeral=True)

    @discord.ui.button(label="üìù ‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", style=discord.ButtonStyle.primary, emoji="üìù")
    async def personal_note(self, interaction: discord.Interaction, button: Button):
        user_note = user_notes.get(str(interaction.user.id))
        modal = PersonalNoteModal()
        
        if user_note:
            modal.note.default = user_note["note"]
            
        await interaction.response.send_modal(modal)

# --------------------------------------------------------------------------------------------------
# View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡πã‡∏ß
class ConfirmTicketView(View):
    def __init__(self, embed_data: discord.Embed):
        super().__init__(timeout=300)
        self.embed_data = embed_data

    @discord.ui.button(label="‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", style=discord.ButtonStyle.success, custom_id="confirm_ticket")
    async def confirm_button(self, interaction: discord.Interaction, button: Button):
        try:
            role_id = 1361016912259055896
            role = interaction.guild.get_role(role_id)
            if role not in interaction.user.roles:
                await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ", ephemeral=True)
                return

            if any(field.name == "üìã ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏î‡∏¢" for field in self.embed_data.fields):
                await interaction.response.send_message("‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
                return

            self.embed_data.add_field(name="üìã ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏î‡∏¢", value=interaction.user.mention, inline=False)
            await send_sale_log(self.embed_data, interaction=interaction, delivered_by=interaction.user)

            await interaction.response.send_message("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
            await interaction.message.edit(view=None)
        except Exception as e:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", ephemeral=True)

    @discord.ui.button(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", style=discord.ButtonStyle.danger, custom_id="cancel_ticket")
    async def cancel_button(self, interaction: discord.Interaction, button: Button):
        try:
            cancel_embed = discord.Embed(
                title="‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                description=f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢ {interaction.user.mention}",
                color=0xFF0000
            )
            await interaction.response.send_message(embed=cancel_embed)
            await interaction.message.edit(view=None)
        except Exception as e:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", ephemeral=True)

# --------------------------------------------------------------------------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß
class GoToTicketView(discord.ui.View):
    def __init__(self, channel):
        super().__init__(timeout=None)
        self.add_item(
            discord.ui.Button(
                label="‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πã‡∏ß",
                url=channel.jump_url,
                style=discord.ButtonStyle.link
            )
        )

async def handle_open_ticket(interaction, category_name, modal_class):
    global stock_amount
    
    if stock_amount <= 0:
        await interaction.response.send_message("‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", ephemeral=True)
        return
        
    guild = interaction.guild
    user = interaction.user

    if guild is None:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", ephemeral=True)
        return

    channel_name = f"ticket-{user.name}-{user.id}"
    existing_channel = discord.utils.get(guild.text_channels, name=channel_name)

    if isinstance(user, discord.Member) and existing_channel and existing_channel.permissions_for(user).read_messages:
        await interaction.response.send_message("üìå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
        return

    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True),
        user: discord.PermissionOverwrite(read_messages=True, send_messages=True)
    }

    admin_role = guild.get_role(1361016912259055896)
    if admin_role:
        overwrites[admin_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

    category = discord.utils.get(guild.categories, name=category_name)
    if category is None:
        await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà {category_name}", ephemeral=True)
        return

    try:
        channel = await guild.create_text_channel(
            name=channel_name,
            overwrites=overwrites,
            reason="New ticket",
            category=category
        )
        
        stock_amount -= 1
        await update_main_channel()
        
        await interaction.response.send_message(
            content="üì© ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!",
            view=GoToTicketView(channel),
            ephemeral=True
        )

        if admin_role:
            await channel.send(content=admin_role.mention)

        welcome_embed = discord.Embed(
            title="üç£ Sushi Shop üç£",
            description=(
                "**‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤!**\n\n"
                f"üë§ **‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:** {user.mention}\n"
                f"üõ†Ô∏è **‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:** {admin_role.mention if admin_role else '‡∏£‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠'}\n\n"
                "**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**\n"
                "‚Ä¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n"
                "‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !gp, !g ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ\n"
                "‚Ä¢ ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î\n\n"
                "**‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!** üéâ"
            ),
            color=0x00FF99
        )
        welcome_embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/717757556889747657/1403684950770847754/noFilter.png")
        welcome_embed.set_footer(text="Sushi Shop Professional Service")

        view = TicketActionView(channel, user, modal_class)
        await channel.send(embed=welcome_embed, view=view)

    except Exception as e:
        await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß", ephemeral=True)

# --------------------------------------------------------------------------------------------------
# View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß
class TicketActionView(View):
    def __init__(self, channel: discord.TextChannel, owner: discord.Member, modal_class):
        super().__init__(timeout=None)
        self.channel = channel
        self.owner = owner
        self.modal_class = modal_class

    @discord.ui.button(label="üìù ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°", style=discord.ButtonStyle.primary, emoji="üìù")
    async def open_form(self, interaction: discord.Interaction, button: Button):
        user_data = user_forms.get(str(interaction.user.id))
        try:
            await interaction.response.send_modal(self.modal_class(
                user_id=interaction.user.id, 
                existing_data=user_data
            ))
        except Exception as e:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°", ephemeral=True)

    @discord.ui.button(label="üì§ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", style=discord.ButtonStyle.success, emoji="üì§")
    async def payment_info(self, interaction: discord.Interaction, button: Button):
        try:
            embed = discord.Embed(
                title="üì§ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
                description="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á",
                color=0x00CCFF
            )
            embed.set_image(url="https://media.discordapp.net/attachments/722832040860319835/1402994996600111114/186-8-06559-8.png")
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", ephemeral=True)

    @discord.ui.button(label="üîí ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß", style=discord.ButtonStyle.danger, emoji="üîí")
    async def close_ticket(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id != self.owner.id and not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ", ephemeral=True)
            return

        await interaction.response.send_message("üì™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...", ephemeral=True)
        await asyncio.sleep(5)
        
        global stock_amount
        stock_amount += 1
        await update_main_channel()
        
        try:
            await self.channel.delete()
        except:
            pass

# --------------------------------------------------------------------------------------------------
# Events
@bot.event
async def on_ready():
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß: {bot.user}")
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="‡∏£‡πâ‡∏≤‡∏ô Sushi Shop"))
    bot.add_view(MainShopView())
    await update_main_channel()

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.type != discord.InteractionType.component:
        return

    custom_id = interaction.data.get("custom_id")
    
    try:
        if custom_id == "open_gamepass_ticket":
            if not shop_open or stock_amount <= 0:
                await interaction.response.send_message("‚ùå ‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î", ephemeral=True)
                return
            await handle_open_ticket(interaction, "üç£Sushi Gamepass üç£", GamepassTicketModal)

        elif custom_id == "open_group_ticket":
            if not shop_open or stock_amount <= 0:
                await interaction.response.send_message("‚ùå ‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î", ephemeral=True)
                return
            if not group_ticket_enabled:
                await interaction.response.send_message("‚ùå ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Group ‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", ephemeral=True)
                return
            await handle_open_ticket(interaction, "üí∞Robux Groupüí∞", GroupTicketModal)
            
        elif custom_id == "manage_my_form":
            view = FormManagementView(user_id=interaction.user.id)
            embed = discord.Embed(
                title="üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô",
                description="**‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ:**\n\n"
                          "‚Ä¢ üëÄ **‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•** - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ\n"
                          "‚Ä¢ ‚úèÔ∏è **‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç** - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°\n"
                          "‚Ä¢ üóëÔ∏è **‡∏•‡∏ö** - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö\n"
                          "‚Ä¢ üìù **‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß** - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n\n"
                          "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                color=0x5865F2
            )
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    except Exception as e:
        print(f"Interaction error: {e}")
        try:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", ephemeral=True)
        except:
            pass

# --------------------------------------------------------------------------------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !od (Gamepass)
@bot.command()
async def od(ctx, *, expression: str):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Robux Gamepass"""
    try:
        expr = expression.replace(",", "").lower().replace("x", "*").replace("√∑", "/")

        if not re.match(r"^[\d\s\+\-\*\/\(\)]+$", expr):
            await ctx.send("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ + - * / x √∑ ()", ephemeral=True)
            await ctx.message.delete()
            return

        robux = int(eval(expr))
        price = robux / gamepass_rate
        price_str = f"{price:,.0f} ‡∏ö‡∏≤‡∏ó"

        embed = discord.Embed(
            title="üç£ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Gamepass üç£",
            color=0x00FF99,
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(name="üì¶ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value="Robux Gamepass", inline=False)
        embed.add_field(name="üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux", value=f"{robux:,}", inline=True)
        embed.add_field(name="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏£‡∏ó", value=price_str, inline=True)
        embed.add_field(name="üöö ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=ctx.author.mention, inline=False)
        embed.set_footer(text="‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        await ctx.send(embed=embed)
        await ctx.message.delete()

        sales_channel = bot.get_channel(SALES_LOG_CHANNEL_ID)
        if sales_channel:
            await sales_channel.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)
        await ctx.message.delete()

# --------------------------------------------------------------------------------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !odg (Group)
@bot.command()
async def odg(ctx, *, expression: str):
    """‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Robux Group"""
    try:
        expr = expression.replace(",", "").lower().replace("x", "*").replace("√∑", "/")

        if not re.match(r"^[\d\s\+\-\*\/\(\)]+$", expr):
            await ctx.send("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ + - * / x √∑ ()", ephemeral=True)
            await ctx.message.delete()
            return

        robux = int(eval(expr))
        rate = group_rate_low if robux < 1500 else group_rate_high
        price = robux / rate
        price_str = f"{price:,.0f} ‡∏ö‡∏≤‡∏ó"

        embed = discord.Embed(
            title="üç£ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Robux Group üç£",
            color=0x00AAFF,
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(name="üì¶ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value="Robux Group", inline=False)
        embed.add_field(name="üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux", value=f"{robux:,}", inline=True)
        embed.add_field(name="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏£‡∏ó", value=price_str, inline=True)
        embed.add_field(name="üìä ‡πÄ‡∏£‡∏ó‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", value=f"{rate}", inline=True)
        embed.add_field(name="üöö ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", value=ctx.author.mention, inline=False)
        embed.set_footer(text="‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Ä¢ Robux Group")

        await ctx.send(embed=embed)
        await ctx.message.delete()

        sales_channel = bot.get_channel(SALES_LOG_CHANNEL_ID)
        if sales_channel:
            await sales_channel.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)
        await ctx.message.delete()

# --------------------------------------------------------------------------------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
async def send_ephemeral_calculation(ctx, calculation_func, expression):
    """‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    try:
        expression = expression.replace(",", "").lower().replace("x", "*").replace("√∑", "/")

        if not re.match(r"^[\d\s\+\-\*\/\(\)]+$", expression):
            await ctx.send("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ + - * / x √∑ ()", ephemeral=True)
            await ctx.message.delete()
            return

        result = calculation_func(expression)
        await ctx.send(result, ephemeral=True)
        await ctx.message.delete()

    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", ephemeral=True)
        await ctx.message.delete()

def calculate_gp(expression):
    robux = eval(expression)
    price = robux / gamepass_rate
    return f"üéÆ **Gamepass**\n```\n{robux:,} Robux = {price:,.0f} ‡∏ö‡∏≤‡∏ó\n‡πÄ‡∏£‡∏ó: {gamepass_rate}\n```"

def calculate_g(expression):
    robux = eval(expression)
    rate = group_rate_low if robux < 1500 else group_rate_high
    price = robux / rate
    return f"üë• **Robux Group**\n```\n{robux:,} Robux = {price:,.0f} ‡∏ö‡∏≤‡∏ó\n‡πÄ‡∏£‡∏ó: {rate}\n```"

def calculate_gpb(expression):
    baht = eval(expression)
    robux = baht * gamepass_rate
    return f"üéÆ **Gamepass**\n```\n{baht:,.0f} ‡∏ö‡∏≤‡∏ó = {robux:,.0f} Robux\n‡πÄ‡∏£‡∏ó: {gamepass_rate}\n```"

def calculate_gb(expression):
    baht = eval(expression)
    rate = group_rate_low if baht < 500 else group_rate_high
    robux = baht * rate
    return f"üë• **Robux Group**\n```\n{baht:,.0f} ‡∏ö‡∏≤‡∏ó = {robux:,.0f} Robux\n‡πÄ‡∏£‡∏ó: {rate}\n```"

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
@bot.command()
async def gp(ctx, *, expression: str):
    await send_ephemeral_calculation(ctx, calculate_gp, expression)

@bot.command()
async def g(ctx, *, expression: str):
    await send_ephemeral_calculation(ctx, calculate_g, expression)

@bot.command()
async def gpb(ctx, *, expression: str):
    await send_ephemeral_calculation(ctx, calculate_gpb, expression)

@bot.command()
async def gb(ctx, *, expression: str):
    await send_ephemeral_calculation(ctx, calculate_gb, expression)

# --------------------------------------------------------------------------------------------------
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ
@bot.command()
@commands.has_permissions(administrator=True)
async def qr(ctx):
    embed = discord.Embed(
        title="üì± ‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        description="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ",
        color=0x00CCFF)
    embed.set_image(url="https://media.discordapp.net/attachments/722832040860319835/1402994996600111114/186-8-06559-8.png")
    await ctx.send(embed=embed)
    await ctx.message.delete()

@bot.command()
@commands.has_permissions(administrator=True)
async def setup(ctx):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà"""
    await update_main_channel()
    await ctx.send("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", delete_after=5)
    await ctx.message.delete()

# --------------------------------------------------------------------------------------------------
server_on()
bot.run(os.getenv("TOKEN"))
